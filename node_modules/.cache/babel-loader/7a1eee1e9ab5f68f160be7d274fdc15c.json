{"ast":null,"code":"var _jsxFileName = \"/home/ivan/Documentos/Dise\\xF1o web/task-tracker-react/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { BrowserRouter as Router, Route, Routes, Outlet } from 'react-router-dom';\nimport Header from './Components/Header';\nimport Footer from './Components/Footer';\nimport Tasks from './Components/Tasks';\nimport AddTask from './Components/AddTask';\nimport About from './Components/About';\nimport { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [showAddTask, setShowAddTask] = useState(false);\n  const [tasks, setTasks] = useState([]);\n  useEffect(() => {\n    const getTasks = async () => {\n      const tasksFromServer = await fetchTasks();\n      setTasks(tasksFromServer);\n    };\n\n    getTasks();\n  }, []); //Fetch Tasks\n\n  const fetchTasks = async () => {\n    const res = await fetch('http://localhost:5000/tasks');\n    const data = await res.json();\n    return data;\n  }; //Fetch Task\n\n\n  const fetchTask = async id => {\n    const res = await fetch(`http://localhost:5000/tasks/${id}`);\n    const data = await res.json();\n    return data;\n  }; //Add Task\n\n\n  const addTask = async task => {\n    const res = await fetch('http://localhost:5000/tasks', {\n      method: 'POST',\n      headers: {\n        'Content-type': 'application/json'\n      },\n      body: JSON.stringify(task)\n    });\n    const data = await res.json();\n    setTasks([...tasks, data]);\n    /* const id=Math.floor(Math.random() * 10000) +1\n    const newTask = { id, ...task }\n    setTasks([...tasks, newTask]) */\n  }; //Delete Task\n\n\n  const deleteTask = async id => {\n    await fetch(`http://localhost:5000/tasks/${id}`, {\n      method: 'DELETE'\n    });\n    setTasks(tasks.filter(task => task.id !== id));\n  }; //Toggle reminder\n\n\n  const toggleReminder = async id => {\n    const taskToToggle = await fetchTask(id);\n    const updTask = { ...taskToToggle,\n      reminder: !taskToToggle.reminder\n    };\n    const res = await fetch(`http://localhost:5000/tasks/${id}`, {\n      method: 'PUT',\n      headers: {\n        'Content-type': 'application/json'\n      },\n      body: JSON.stringify(updTask)\n    });\n    const data = await res.json();\n    setTasks(tasks.map(task => task.id === id ? { ...task,\n      reminder: data.reminder\n    } : task));\n  };\n\n  return /*#__PURE__*/_jsxDEV(Router, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        onAdd: () => setShowAddTask(!showAddTask),\n        showAdd: showAddTask\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Routes, {\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          path: \"/\",\n          element: /*#__PURE__*/_jsxDEV(MainApp, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 40\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/about\",\n          element: /*#__PURE__*/_jsxDEV(About, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 45\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 5\n  }, this);\n\n  let MainApp = props => {\n    {\n      showAddTask && /*#__PURE__*/_jsxDEV(AddTask, {\n        onAdd: addTask\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 21\n      }, this);\n    }\n    {\n      tasks.length > 0 ? /*#__PURE__*/_jsxDEV(Tasks, {\n        tasks: tasks,\n        onDelete: deleteTask,\n        onToggle: toggleReminder\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 12\n      }, this) : 'No tasks to show';\n    }\n  };\n}\n\n_s(App, \"pA4snfDjny2P+O1a+6NjXQ6HzBU=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/ivan/Documentos/DiseÃ±o web/task-tracker-react/src/App.js"],"names":["BrowserRouter","Router","Route","Routes","Outlet","Header","Footer","Tasks","AddTask","About","useState","useEffect","App","showAddTask","setShowAddTask","tasks","setTasks","getTasks","tasksFromServer","fetchTasks","res","fetch","data","json","fetchTask","id","addTask","task","method","headers","body","JSON","stringify","deleteTask","filter","toggleReminder","taskToToggle","updTask","reminder","map","MainApp","props","length"],"mappings":";;;AAAA,SAASA,aAAa,IAAIC,MAA1B,EAAkCC,KAAlC,EAAyCC,MAAzC,EAAiDC,MAAjD,QAA+D,kBAA/D;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAOC,OAAP,MAAoB,sBAApB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;;AAKA,SAASC,GAAT,GAAe;AAAA;;AACb,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCJ,QAAQ,CAAC,KAAD,CAA9C;AACA,QAAM,CAACK,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,CAAC,EAAD,CAAlC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMM,QAAQ,GAAG,YAAY;AAC3B,YAAMC,eAAe,GAAG,MAAMC,UAAU,EAAxC;AACEH,MAAAA,QAAQ,CAACE,eAAD,CAAR;AACH,KAHD;;AAKAD,IAAAA,QAAQ;AACT,GAPQ,EAON,EAPM,CAAT,CAJa,CAab;;AACA,QAAME,UAAU,GAAG,YAAY;AAC7B,UAAMC,GAAG,GAAG,MAAMC,KAAK,CAAE,6BAAF,CAAvB;AACA,UAAMC,IAAI,GAAG,MAAMF,GAAG,CAACG,IAAJ,EAAnB;AAEA,WAAOD,IAAP;AACD,GALD,CAda,CAqBX;;;AACA,QAAME,SAAS,GAAG,MAAOC,EAAP,IAAc;AAC9B,UAAML,GAAG,GAAG,MAAMC,KAAK,CAAG,+BAA8BI,EAAG,EAApC,CAAvB;AACA,UAAMH,IAAI,GAAG,MAAMF,GAAG,CAACG,IAAJ,EAAnB;AAEA,WAAOD,IAAP;AACD,GALD,CAtBW,CA6Bf;;;AACA,QAAMI,OAAO,GAAG,MAAOC,IAAP,IAAgB;AAC9B,UAAMP,GAAG,GAAG,MAAMC,KAAK,CAAC,6BAAD,EAAgC;AACrDO,MAAAA,MAAM,EAAE,MAD6C;AAErDC,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT,OAF4C;AAKrDC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeL,IAAf;AAL+C,KAAhC,CAAvB;AAQA,UAAML,IAAI,GAAG,MAAMF,GAAG,CAACG,IAAJ,EAAnB;AAEAP,IAAAA,QAAQ,CAAC,CAAC,GAAGD,KAAJ,EAAWO,IAAX,CAAD,CAAR;AAEA;AACF;AACA;AACC,GAhBD,CA9Be,CAgDf;;;AAEA,QAAMW,UAAU,GAAG,MAAOR,EAAP,IAAc;AAC/B,UAAMJ,KAAK,CAAE,+BAA8BI,EAAG,EAAnC,EAAsC;AAC/CG,MAAAA,MAAM,EAAE;AADuC,KAAtC,CAAX;AAIAZ,IAAAA,QAAQ,CAACD,KAAK,CAACmB,MAAN,CAAcP,IAAD,IAAUA,IAAI,CAACF,EAAL,KAAYA,EAAnC,CAAD,CAAR;AACD,GAND,CAlDe,CA0Df;;;AACA,QAAMU,cAAc,GAAG,MAAOV,EAAP,IAAc;AACrC,UAAMW,YAAY,GAAG,MAAMZ,SAAS,CAACC,EAAD,CAApC;AACA,UAAMY,OAAO,GAAG,EAAE,GAAGD,YAAL;AACdE,MAAAA,QAAQ,EAAE,CAACF,YAAY,CAACE;AADV,KAAhB;AAGA,UAAMlB,GAAG,GAAG,MAAMC,KAAK,CAAE,+BAA8BI,EAAG,EAAnC,EAAsC;AAC3DG,MAAAA,MAAM,EAAE,KADmD;AAE3DC,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT,OAFkD;AAK3DC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeK,OAAf;AALqD,KAAtC,CAAvB;AAQA,UAAMf,IAAI,GAAG,MAAMF,GAAG,CAACG,IAAJ,EAAnB;AAEEP,IAAAA,QAAQ,CACND,KAAK,CAACwB,GAAN,CAAWZ,IAAD,IACRA,IAAI,CAACF,EAAL,KAAYA,EAAZ,GACA,EAAE,GAAGE,IAAL;AAAWW,MAAAA,QAAQ,EAAEhB,IAAI,CAACgB;AAA1B,KADA,GACsCX,IAFxC,CADM,CAAR;AAMD,GArBD;;AAuBE,sBACE,QAAC,MAAD;AAAA,2BACE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,8BACE,QAAC,MAAD;AACE,QAAA,KAAK,EAAE,MAAMb,cAAc,CAAC,CAACD,WAAF,CAD7B;AAEE,QAAA,OAAO,EAAEA;AAFX;AAAA;AAAA;AAAA;AAAA,cADF,eAII,QAAC,MAAD;AAAA,gCACI,QAAC,KAAD;AAAO,UAAA,IAAI,EAAC,GAAZ;AAAgB,UAAA,OAAO,eAAE,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAzB;AAAA;AAAA;AAAA;AAAA,gBADJ,eAGI,QAAC,KAAD;AAAO,UAAA,IAAI,EAAC,QAAZ;AAAqB,UAAA,OAAO,eAAE,QAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAA9B;AAAA;AAAA;AAAA;AAAA,gBAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,cAJJ,eASE,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,cATF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;;AAkBA,MAAI2B,OAAO,GAAIC,KAAD,IAAW;AACvB;AAAC5B,MAAAA,WAAW,iBAAI,QAAC,OAAD;AAAS,QAAA,KAAK,EAAEa;AAAhB;AAAA;AAAA;AAAA;AAAA,cAAf;AAA2C;AACxC;AAACX,MAAAA,KAAK,CAAC2B,MAAN,GAAe,CAAf,gBACE,QAAC,KAAD;AACC,QAAA,KAAK,EAAE3B,KADR;AAEC,QAAA,QAAQ,EAAEkB,UAFX;AAGC,QAAA,QAAQ,EAAEE;AAHX;AAAA;AAAA;AAAA;AAAA,cADF,GAKE,kBALF;AAKsB;AAAC,GAP9B;AASD;;GA7GQvB,G;;KAAAA,G;AA8GL,eAAeA,GAAf","sourcesContent":["import { BrowserRouter as Router, Route, Routes, Outlet } from 'react-router-dom';\nimport Header from './Components/Header'\nimport Footer from './Components/Footer'\nimport Tasks from './Components/Tasks'\nimport AddTask from './Components/AddTask'\nimport About from './Components/About'\nimport { useState, useEffect } from 'react'\n\n\n\n\nfunction App() {\n  const [showAddTask, setShowAddTask] = useState(false)\n  const [tasks, setTasks] = useState([])\n\n  useEffect(() => {\n    const getTasks = async () => {\n      const tasksFromServer = await fetchTasks()\n        setTasks(tasksFromServer)\n    }\n\n    getTasks()\n  }, [])\n\n  //Fetch Tasks\n  const fetchTasks = async () => {\n    const res = await fetch ('http://localhost:5000/tasks')\n    const data = await res.json()\n\n    return data\n  }\n\n    //Fetch Task\n    const fetchTask = async (id) => {\n      const res = await fetch (`http://localhost:5000/tasks/${id}` )\n      const data = await res.json()\n  \n      return data\n    }\n\n//Add Task\nconst addTask = async (task) => {\n  const res = await fetch('http://localhost:5000/tasks', {\n    method: 'POST',\n    headers: {\n      'Content-type': 'application/json'\n    },\n    body: JSON.stringify(task)\n  })\n\n  const data = await res.json()\n\n  setTasks([...tasks, data])\n\n  /* const id=Math.floor(Math.random() * 10000) +1\n  const newTask = { id, ...task }\n  setTasks([...tasks, newTask]) */\n}\n\n//Delete Task\n\nconst deleteTask = async (id) => {\n  await fetch(`http://localhost:5000/tasks/${id}`, {\n    method: 'DELETE'\n  })\n\n  setTasks(tasks.filter((task) => task.id !== id))\n}\n\n//Toggle reminder\nconst toggleReminder = async (id) => {\nconst taskToToggle = await fetchTask(id)\nconst updTask = { ...taskToToggle, \n  reminder: !taskToToggle.reminder }\n\nconst res = await fetch(`http://localhost:5000/tasks/${id}`, {\n  method: 'PUT', \n  headers: {\n    'Content-type': 'application/json'\n  },\n  body: JSON.stringify(updTask)\n})\n\nconst data = await res.json()\n\n  setTasks(\n    tasks.map((task) => \n      task.id === id ? \n      { ...task, reminder: data.reminder} : task\n    )\n  )\n}\n\n  return (\n    <Router>\n      <div className=\"container\">\n        <Header \n          onAdd={() => setShowAddTask(!showAddTask)}\n          showAdd={showAddTask} />\n          <Routes>\n              <Route path='/' element={<MainApp />} /> \n              \n              <Route path='/about' element={<About />} />\n          </Routes>\n        <Footer />\n      </div>\n    </Router>\n  \n  );\n\n\n  let MainApp = (props) => {\n    {showAddTask && <AddTask onAdd={addTask} />}\n        {tasks.length > 0 ?\n          (<Tasks \n            tasks={tasks} \n            onDelete={deleteTask}\n            onToggle={toggleReminder} />) : \n          ('No tasks to show')}}\n \n}\n    export default App;\n"]},"metadata":{},"sourceType":"module"}